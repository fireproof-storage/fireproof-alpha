{"version":3,"sources":["../src/config.js","import.js"],"names":["_core","require","_fs","_path","config","dataDir","loadDatabase","database","clock","loadClock","Error","Fireproof","storage","clockFile","join","JSON","parse","readFileSync","err","_react","_interopRequireWildcard","_propTypes","_interopRequireDefault","_ink","_config","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Import","filename","stage","setStage","useState","db","setDb","loadFile","useCallback","fullFilePath","process","cwd","readableStream","createReadStream","parseStream","pipe","on","data","ok","put","console","log","initDatabase","useEffect","createElement","Text","propTypes","PropTypes","string","isRequired","positionalArgs","_default","exports"],"mappings":"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","file":"import.js","sourceRoot":"../../commands","sourcesContent":["import { Fireproof } from '@fireproof/core'\nimport { readFileSync } from 'fs'\nimport { join } from 'path'\n\nconst config = {\n  dataDir: '~/.fireproof'\n}\n\nexport function loadDatabase (database) {\n  const clock = loadClock(database)\n  if (clock) {\n    throw new Error(`Database ${database} already exists`)\n  } else {\n    return Fireproof.storage(database)\n  }\n}\n\nfunction loadClock (database) {\n  const clockFile = join(config.dataDir, database, 'clock.json')\n  let clock\n  try {\n    clock = JSON.parse(readFileSync(clockFile, 'utf8'))\n  } catch (err) {\n    clock = null\n  }\n  return clock\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from 'ink'\nimport { join } from 'path'\nimport { createReadStream } from 'fs'\nimport { parse } from '@jsonlines/core'\nimport { loadDatabase } from '../src/config.js'\n\n/// Import data into a database\nconst Import = ({ database, filename }) => {\n  const [stage, setStage] = useState('initializing')\n  const [db, setDb] = useState(null)\n\n  const loadFile = useCallback(() => {\n    const fullFilePath = join(process.cwd(), filename)\n    setStage('importing')\n    const readableStream = createReadStream(fullFilePath)\n    const parseStream = parse()\n    readableStream.pipe(parseStream)\n    parseStream.on('data', async (data) => {\n      const ok = await db.put(data)\n      console.log('put', ok)\n    })\n  }, [filename])\n\n  const initDatabase = useCallback(() => {\n    // use the database name to see if there is a directory in the root directory with that name\n    // if not, create it\n    setStage('loading')\n    setDb(loadDatabase(database))\n  }, [database])\n\n  useEffect(() => {\n    if (db) { loadFile() }\n  }, [db])\n\n  useEffect(() => {\n    initDatabase()\n  }, [])\n\n  return <Text>Importing {filename} to {database}. Stage: {stage}</Text>\n}\n\nImport.propTypes = {\n  /// Name of the database to use, will create if necessary\n  database: PropTypes.string.isRequired,\n  /// Path to a JSON file to import\n  filename: PropTypes.string.isRequired\n}\nImport.positionalArgs = ['database', 'filename']\n\nexport default Import\n"]}