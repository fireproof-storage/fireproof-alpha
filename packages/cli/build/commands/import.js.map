{"version":3,"sources":["import.js"],"names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_ink","_path","_fs","_core","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Import","database","filename","stage","setStage","useState","loadFile","useCallback","fullFilePath","join","process","cwd","readableStream","createReadStream","parseStream","parse","pipe","on","data","useEffect","createElement","Text","propTypes","PropTypes","string","isRequired","positionalArgs","_default","exports","read","filePath","fs","error","console","log","message","chunk"],"mappings":"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","file":"import.js","sourceRoot":"../../commands","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from 'ink'\nimport { join } from 'path'\nimport { createReadStream } from 'fs'\nimport { parse } from '@jsonlines/core'\n\n// import { readFile } from 'fs/promises'\n\n/// Import data into a database\nconst Import = ({ database, filename }) => {\n  const [stage, setStage] = useState('initializing')\n\n  const loadFile = useCallback(() => {\n    const fullFilePath = join(process.cwd(), filename)\n    setStage('loading')\n    const readableStream = createReadStream(fullFilePath)\n    const parseStream = parse()\n    readableStream.pipe(parseStream)\n    parseStream.on('data', (data) => {\n\n\n\n    })\n  }, [filename])\n\n  useEffect(() => {\n    // load the file from the filesystem, based on the file path and the directory the user is running the command from\n    // parse the file as JSON\n    loadFile()\n  }, [])\n\n  return <Text>Importing {filename} to {database}. Stage: {stage}</Text>\n}\n\nImport.propTypes = {\n  /// Name of the database to use, will create if necessary\n  database: PropTypes.string.isRequired,\n  /// Path to a JSON file to import\n  filename: PropTypes.string.isRequired\n}\nImport.positionalArgs = ['database', 'filename']\n\nexport default Import\n\nfunction read (filePath) {\n  const readableStream = fs.createReadStream(filePath)\n\n  readableStream.on('error', function (error) {\n    console.log(`error: ${error.message}`)\n  })\n\n  readableStream.on('data', (chunk) => {\n    console.log(chunk)\n  })\n}\n"]}